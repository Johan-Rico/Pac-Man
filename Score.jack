class Score {
	static int score;
	field Map map;
	static int high;
	field int nPellets, collectedPellets;
	field int nRows, nCols;
	field Array tiles;
	field boolean color;
	field boolean power;
	
	constructor Score new(boolean c, Map m) {
		let map = m;
		let nPellets = 410;
		let collectedPellets = 0;
		let nRows = 26;
		let nCols = 56;
		let score = 0;
		let color = c;
		let tiles = Array.new(nRows);
		return this;
	}
	
	method void init() {
		do createPellets();
		do changeColor(color);
		return;
	}
	
	method void changeColor(boolean c) {
		let color = c;
		do printLabels();
		do printScore();
		do drawPellets();
		return;
	}

	method void printLabels() {
		do Output.setColor(color);
		do Output.moveCursor(1,24);
		do Output.printString(" HIGH SCORE");
		do Output.moveCursor(1,36);
		if (high > 0) {
			do Output.printInt(high);
		} else {
			do Output.printString("00");
		}
		return;
	}

	method boolean allPelletsCollected() {
		return (collectedPellets = nPellets);
	}

	method void printScore() {
		do Output.moveCursor(1,4);
		do Output.setColor(color);
		if (score > 0) { do Output.printInt(score);	}
		else {	do Output.printString("00");	}
		if ((score > high) | (1 > 0)) {
			let high = score;
			do Output.moveCursor(1,36);
			do Output.printInt(high);
		}
		return;
	}

	method void createPellets() {
		var int i, c, r;
		var Array row;

		let i = 0;
		let r = 0;

		while (r < nRows) {
			let tiles[r] = Array.new(nCols / 8);
			let row = tiles[r];
			let c = 0;
			while (c < nCols) {
				if (~map.checkOverlapping(c*9+6, r*9+27)) {
					let row[c / 8] = row[c / 8] | Math2.two_to_the(7 - Math2.mod(c, 8));
				}
				let c = c + 1;
			}
			let r = r + 1;
		}
		
		let i = 11;
		while (i < 18) {
			let row = tiles[i];
			let row[0] = 0;
			let row[6] = 0;
			let i = i + 1;
		}
		
		let i = 12;
		while (i < 18) {
			let row = tiles[i];
			let row[2] = row[2] & (-2);
			let row[3] = 0;
			let row[4] = row[4] & (-129);
			let i = i + 1;
		}

		let row = tiles[23];
		let row[3] = row[3] & (-25);

		return;
	}

	method void drawPellets() {
		var int r, c;
		var Array row;

		let r = 0;
		while (r < nRows) {
			let row = tiles[r];
			let c = 0;
			while (c < nCols) {
				if ((row[c / 8] | ~Math2.two_to_the(7 - Math2.mod(c, 8))) = -1) {
					do drawPellet(c, r, false);
				}
				let c = c + 1;
			}
			let r = r + 1;
		}
		return;
	}
  
	method void checkCollision(int x, int y) {
		var int c, r, pos;
		var boolean dx, dy;
		var Array row;
		let c = (x - 6) / 9;
		let r = (y - 27) / 9;
		let row = tiles[r];
		
		let dx = Math2.mod(x - 6, 9) > 0;
		let dy = Math2.mod(y - 27, 9) > 0;

		if ((r > 9) & (r < 19) & ((c > 49) | (c < 6))) {
			return;
		}

		let pos = ~Math2.two_to_the(7 - Math2.mod(c, 8));
		if ((row[c / 8] | pos) = -1) {
			let row[c / 8] = row[c / 8] & pos;
			do eatPellet(c, r);
		}

		if (dx) {
			let c = c + 1;
			let pos = ~Math2.two_to_the(7 - Math2.mod(c, 8));
			if ((row[c / 8] | pos) = -1) {
				let row[c / 8] = row[c / 8] & pos;
				do eatPellet(c, r);
			}
		}

		if (dy) {
			let r = r + 1;
			let row = tiles[r];
			if ((row[c / 8] | pos) = -1) {
				let row[c / 8] = row[c / 8] & pos;
				do eatPellet(c, r);
			}
		}

	  	return;
	}

	method void drawClosePellets(int x, int y) {
		var int c, r, dc, dr;
		var boolean dx, dy;
		var Array row;
		let c = (x - 6) / 9;
		let r = (y - 27) / 9;
		let row = tiles[r];
		
		let dx = Math2.mod(x - 6, 9) > 0;
		let dy = Math2.mod(y - 27, 9) > 0;

		if ((r > 9) & (r < 19) & ((c > 49) | (c < 6))) {
			return;
		}

		if (~dx & ~dy) {
			let dr = r - 1;
			let dc = c - 1;
			while (dr < (r + 2)) {
				let row = tiles[dr];
				let dc = c - 1;
				while (dc < (c + 2)) {
					let row = tiles[dr];
					if ((row[dc / 8] | ~Math2.two_to_the(7 - Math2.mod(dc, 8))) = -1) {
						do drawPellet(dc, dr, false);
					}
					let dc = dc + 1;
				}
				let dr = dr + 1;
			}
			return;
		}

		if (dx) {
			let dc = c - 1;
			while (dc < (c + 3)) {
				if ((row[dc / 8] | ~Math2.two_to_the(7 - Math2.mod(dc, 8))) = -1) {
					do drawPellet(dc, r, false);
				}
				let dc = dc + 1;
			}
		}

		if (dy) {
			let dr = r - 1;
			while (dr < (r + 3)) {
				let row = tiles[dr];
				if ((row[c / 8] | ~Math2.two_to_the(7 - Math2.mod(c, 8))) = -1) {
					do drawPellet(c, dr, false);
				}
				let dr = dr + 1;
			}
		}

		return;
		
	}

	method void eatPellet(int c, int r) {
		if (isCookie(c, r)) {
			do addPoints(50);
			let power = true;
		} else {
			do addPoints(10);
		}
		do drawPellet(c, r, true);
		let collectedPellets = collectedPellets + 1;
		return;
	}

	method boolean isCookie(int c, int r) {
		return ((c = 2) & (r = 2)) | ((c = 53) & (r = 2)) | ((c = 11) & (r = 8)) | 
		((c = 44) & (r = 8)) | ((c = 2) & (r = 23)) | ((c = 53) & (r = 23));
	}

	method void drawPellet(int c, int r, boolean eat) {
		var int x, y;
		
		let x = c * 9 + 6;
		let y = r * 9 + 27;

		if (eat) {
			do Screen.setColor(~color);
		} else {
			do Screen.setColor(color);
		}

		if (isCookie(c, r)) {
			do Screen.drawCircle(x, y, 4);
			return;
		}	
		do Screen.drawRectangle(x, y, x+1, y+1);
		return;
	}

	method void addPoints(int points) {
		let score = score + points;
		do printScore();
		return;
	}

	method boolean checkPowerPelletEaten() {
		if (power) {
			let power = false;
			return true;
		}
		return false;
	}

	method void nextLevel() {
		let collectedPellets = 0;
		do createPellets();
		do drawPellets();
		do printLabels();
		do printScore();
		return;
	}

	function int getScore() {
		return score;
	}
  
	method void dispose() {	
	  	do Memory.deAlloc(this);
		do Memory.deAlloc(tiles);
	  	return;
	}

}