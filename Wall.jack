class Wall {
  	// corners of wall
	field int leftX, topY, rightX, bottomY;
	field boolean color;

  	// construct wall
  	constructor Wall new(boolean c, int x1, int y1, int x2, int y2) {
    	let color = c;
    	let leftX = x1;
    	let topY = y1;
    	let rightX = x2;
    	let bottomY = y2;
    	return this;
  	}

  	// draw wall rectangle
  	method void draw() {
    	do Screen.setColor(~color);
    	do Screen.drawRectangle(leftX, topY, rightX, bottomY);
    	do Screen.setColor(color);
    	do Screen.drawRectangle(leftX+1, topY+1, rightX-1, bottomY-1);
      	do Screen.drawPixel(leftX, topY);
      	do Screen.drawPixel(rightX, topY);
      	do Screen.drawPixel(leftX, bottomY);
      	do Screen.drawPixel(rightX, bottomY);
		do Screen.drawPixel(leftX+1, topY);
		do Screen.drawPixel(leftX, topY+1);
		do Screen.drawPixel(rightX-1, topY);
		do Screen.drawPixel(rightX, topY+1);
		do Screen.drawPixel(leftX+1, bottomY);
		do Screen.drawPixel(leftX, bottomY-1);
		do Screen.drawPixel(rightX-1, bottomY);
		do Screen.drawPixel(rightX, bottomY-1);
		do Screen.setColor(~color);
		do Screen.drawPixel(leftX+1, topY+1);
      	do Screen.drawPixel(rightX-1, topY+1);
      	do Screen.drawPixel(leftX+1, bottomY-1);
      	do Screen.drawPixel(rightX-1, bottomY-1);
			
    	
    	return;
  	}

  	// check if object is overlapping wall given its coordinates
  	method boolean checkOverlapping(int x, int y, int radius) {
    	return (
      	// left of object overlaps right of wall
      	// right of object overlaps left of wall
      	((x - radius) < (rightX + 3)) & ((x+radius) > (leftX - 3))
    	) & (
      	// top of object overlaps bottom of wall
      	// bottom of object overlaps top of wall
      	((y-radius) < (bottomY + 3)) & ((y+radius) > (topY - 3))
    	);
  	}

  	// dispose wall
  	method void dispose() {
    	do Memory.deAlloc(this);
    	return;
  	}
}