class Game {
	field PacMan pacman;
	field Ghosts ghosts;
	field Map map;
	field Score score;
	field boolean color;
	field int lives;
	field int level;
	
	constructor Game new() {
		let color = true;
		let lives = 3;
		let level = 1;
		let map = Map.new(~color);
		let score = Score.new(~color, map);
		let pacman = PacMan.new(~color, map, score);
		let ghosts = Ghosts.new(~color, map, pacman);
		do ghosts.setScore(score); 
		return this;
	}

	method void init() {
		do Output.setColor(~color);
		do clearScreen();
		do printLives();
		do map.init();
		do score.init();
		do startLevel();
		return;
	}

	method void next() {
		do score.drawPellets();
		do map.drawDoor();
		do pacman.next();
		do ghosts.next();
		if (score.checkPowerPelletEaten()) {
			do ghosts.makeVulnerable();
		}
		if (ghosts.checkPacmanCollision()) {
			do handlePacmanDeath();
		} else {
		if (score.allPelletsCollected()) {
			do newLevel();
		}}
		return;
	}
	
	method void handleKey(int key) {
		if (key = 144) {
			do changeColor(true);
		}
		if (key = 145) {
			do changeColor(false);
		}
		do pacman.handleKey(key);
		return;
	}

	method void clearScreen() {
		var int x, y;
        do Screen.setColor(color);
		do Screen.drawRectangle(0, 0, 511, 255);
		do Screen.setColor(~color);
		return;
	}

	method void newGame() {
		do clearScreen();
		do init();
		return;
  	}

	method void changeColor(boolean c) {
		let color = c;
		do clearScreen();
		do printLives();
		do ghosts.changeColor(~color);
		do map.changeColor(~color);
		do pacman.changeColor(~color);
		do score.changeColor(~color);
		return;
	}

	method void printLives() {
		var int i;
		let i = 0;
		while (i < (lives - 1)) {	
			do printLive(470-(20*i), 14);
			let i = i + 1;
		}
		return;
	}

	method void printLive(int x, int y) {
		var int i;
		do Screen.setColor(~color);
		do Screen.drawCircle(x, y, 7);
		let i = -2;
		do Screen.setColor(color);
		while (~(i > 2)) {
			do Screen.drawLine(x+(3*Math.abs(i))-1, y+i, x+7, y+i);
			let i = i + 1;
		}
		return;
	}

	method void newLevel() {
		let level = level + 1;
		do Sys.wait(2000);
		do ghosts.clearGhosts();
		do clearScreen();
		do Sys.wait(100);
		do score.nextLevel();
		do map.draw();
		do printLives();
		do score.drawPellets();
		do startLevel();
		return;
	}

	method void startLevel() {
		do pacman.init();
		do ghosts.init();
		do Output.moveCursor(16,28);
		do Output.printString(" READY!");
		do Sys.wait(2500);
		do Output.moveCursor(16,28);
		do Output.printString("       ");
		return;
	}

	method void handlePacmanDeath() {
		let lives = lives - 1;
		
		do Sys.wait(750);
		do ghosts.clearGhosts();
		do score.drawPellets();
		do pacman.deathAnimation();
		do Sys.wait(2000);
		if (lives > 0) {
			do Screen.setColor(color);
			do Screen.drawRectangle(463-(20*(lives)), 7, 477-(20*(lives))+20, 21);
			do startLevel();
		} else {
			do Output.moveCursor(16,26);
			do Output.printString(" GAME  OVER");
		}
		return;
	}

	method void dispose() {
			do Memory.deAlloc(this);
			return;
		}
	}