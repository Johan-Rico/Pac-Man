class PacMan {
    field boolean color;
    field Map map;
    field Score score;
    field int x, y, dir, nextDir;
    field int nextX, nextY;
    field int sprite, adition;
    field int speed, radius;
    field int leftLimit, rightLimit;

    constructor PacMan new(boolean c, Map m, Score s) {
        let color = c;
        let map = m;
        let score = s;
        let radius = 7;
        let leftLimit = 15;
        let rightLimit = 494;
        let dir = 2;
        let nextDir = 2;
        let speed = 3;
        return this;
    }

    method void init() {
        let x = 255;
        let y = 234;
        let dir = 2;
        let nextDir = 2;
        let sprite = 0;
        do Screen.setColor(color);
        do draw();
        return;
    }

    method void changeColor(boolean c) {
        let color = c;
        return;
    }

    method void next() {

        if (x = 255) {
            do clear();
            let x = 256;
        }
       
        if (NextMoveIsPossible(nextDir)) {
            let dir = nextDir;
        } else {
            if (~NextMoveIsPossible(dir)) {
                do score.drawClosePellets(x - 1, y);
                do draw();
                return;
            }
        }

        do score.checkCollision(x - 1, y);

        do clear();
        
        let x = nextX;
        let y = nextY;

        if (x < leftLimit) {
            let x = rightLimit - 1;
        }
        if (x > rightLimit) {
            let x = leftLimit + 1;
        }

        do score.drawClosePellets(x - 1, y);
        do draw();
        let sprite = sprite + adition;
        return;
    }
    
    method void draw() {
        var int i, limit, func, d;
        
        do Screen.setColor(color);
        do Screen.drawCircle(x,y,radius);
        
        if (~((sprite) = 0)) {
            let func = 2*(sprite/2)-5;
            let limit = 3*(sprite/2)-1;
            let i = -limit;
            do Screen.setColor(~color);
            if (dir > 2) {
                let d = -2*dir+7;
                while (~(i > limit)) {
                    do Screen.drawLine(x+i, y-(func*Math.abs(i)*d)-d, x+i, y+(d*radius));
                    let i = i+1;
                }
            } else {
                let d = -2*dir+3;
                while (~(i > limit)) {
                    do Screen.drawLine(x-(func*Math.abs(i)*d)-d, y+i, x+(d*radius), y+i);
                    let i = i+1;
                }
            }
            do Screen.setColor(color);
        }

        if (sprite = 0) {
            let adition = 1;
        } else {
        if (sprite = 5) {
            let adition = -1;
        }}
        
        return;
    }

    method void clear() {
        do Screen.setColor(~color);
        do Screen.drawCircle(x,y,radius);
        return;
    }

    method boolean NextMoveIsPossible(int d) {
        let nextX = x;
        let nextY = y;
        if (d = 1) {
            let nextX = x + speed;
        } else {
        if (d = 2) {
            let nextX = x - speed;
        } else {
        if (d = 3) {
            let nextY = y + speed;
        } else {
        if (d = 4) {
            let nextY = y - speed;
        }}}}
        if (map.checkOverlapping(nextX - 1, nextY)) {
            return false;
        }
        return true;
    }

    method int deathAnimationFunction(int deathSprite, int i) { 
        if (deathSprite = 0) {  return Math.abs(i);         }
        if (deathSprite = 1) {  return Math.abs(i) + 1 / 2; }
        if (deathSprite = 2) {  return Math.abs(i) + 1 / 3; }
        if (deathSprite = 3) {  return Math.abs(i) / 4;     }
        if (deathSprite = 4) {  return -Math.abs(i) / 4;    }
        if (deathSprite = 5) {  return -Math.abs(i) / 2;    }
        if (deathSprite = 6) {  return -Math.abs(i) / 3;    }
        if (deathSprite = 7) {  return -Math.abs(i);        }
        if (deathSprite = 8) 
        {  return -2*Math.abs(i)*(Math.abs(i) < 5);  }
        return 6*(~(i = 0));
    }

    method void deathAnimation() {
        var int i, deathSprite, func;
        let deathSprite = 0;
        do Screen.setColor(color);
        do Screen.drawCircle(x,y,radius);
        do Screen.setColor(~color);
        do Sys.wait(125);
        while (deathSprite < 10) {
            let i = -7;
            while (~(i > 7)) {
                do Screen.drawLine(x+i, y-radius, x+i, y+1-deathAnimationFunction(deathSprite, i));
                let i = i + 1;
            }
            let deathSprite = deathSprite + 1;
            do Sys.wait(125);
        }
        do Screen.setColor(~color);
        do Screen.drawRectangle(x-radius, y-radius, x+radius, y+radius);
        do Screen.setColor(color);
        do Screen.drawLine(x-4,y,x-7,y);
        do Screen.drawLine(x+4,y,x+7,y);
        do Screen.drawLine(x-3,y-3,x-6,y-6);
        do Screen.drawLine(x+3,y-3,x+6,y-6);
        do Screen.drawLine(x-3,y+3,x-6,y+6);
        do Screen.drawLine(x+3,y+3,x+6,y+6);
        do Screen.drawLine(x-1,y-5,x-3,y-7);
        do Screen.drawLine(x+1,y-5,x+3,y-7);
        do Screen.drawLine(x-1,y+5,x-3,y+7);
        do Screen.drawLine(x+1,y+5,x+3,y+7);
        do Sys.wait(125);
        do Screen.setColor(~color);
        do Screen.drawRectangle(x-radius, y-radius, x+radius, y+radius);
        return;
    }

    method void handleKey(int key) {
        if (key = 130) {
            let nextDir = 2; // left
        }
        if (key = 133) {
            let nextDir = 3; // down
        }
        if (key = 132) {
            let nextDir = 1; // right
        }
        if (key = 131) {
            let nextDir = 4; // up
        }

        return;
    }
    method int getX() {
        return x;
    }
    
    method int getY() {
        return y;
    }

    method void dispose() {
    	do Memory.deAlloc(this);
        return;
    }
    
}