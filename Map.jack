class Map {
	field boolean color;
	field Array walls;
	field Array tiles;
	field Array rows;
	field int nWalls;
	field int nRows, nCols;
	field int map;
  
	constructor Map new(boolean c) {
		let color = c;
		let nRows = 26;
		let nCols = 56;
		let nWalls = 1 + 66;
		do createWalls();
		return this;
	}
  
	method void init() {
		do draw();
	  	return;
	}

	method void changeColor(boolean c) {
		let color = c;
		do draw();
		return;
	}

	method void createWall(int n, int x1, int y1, int x2, int y2) {
		var int topX, topY, bottomX, bottomY;
		var Array row;
		var int r, c, i;
		let topX = Math.min(x1,x2);
		let topY = Math.min(y1,y2);
		let bottomX = Math.max(x1,x2);
		let bottomY = Math.max(y1,y2);

		let walls[n] = Wall.new(topX, topY, bottomX, bottomY);

		let r  = topY;
		while (r < (bottomY + 2)) {
			let c = topX;
			let row = tiles[r];
			while (c < (bottomX + 2)) {
				let row[c / 8] = row[c / 8] | Math2.two_to_the(7 - Math2.mod(c, 8));
				let c = c + 1;
			}
			let r = r + 1;
		}
		return;
	}
  
	method void createWalls() {
		var Array row;
		var int r, c;

		let tiles = Array.new(nRows);

		let r = 0;
		while (r < nRows) {
			let c = 0;
			let tiles[r] = Array.new(nCols / 8);
			let row = tiles[r];
			while( c < (nCols / 8)) {
				let row[c] = 0;
				let c = c + 1;
			}
			let r = r + 1;
		}

		let walls = Array.new(nWalls);

		// Border walls
		do createWall(0,0,12,6,12);
		do createWall(1,6,12,6,9);
		do createWall(2,6,9,0,9);
		do createWall(3,0,9,0,0);
		do createWall(4,0,0,54,0);
		do createWall(5,54,0,54,9);
		do createWall(6,54,9,48,9);
		do createWall(7,48,9,48,12);
		do createWall(8,48,12,54,12);
		do createWall(9,0,15,6,15);
		do createWall(10,6,15,6,18);
		do createWall(11,6,18,0,18);
		do createWall(12,0,18,0,24);
		do createWall(13,0,24,54,24);
		do createWall(14,54,24,54,18);
		do createWall(15,54,18,48,18);
		do createWall(16,48,18,48,15);
		do createWall(17,48,15,54,15);

		// Ghost house walls
		do createWall(18,23,15,31,15);
		do createWall(19,23,15,23,10);
		do createWall(20,31,15,31,10);
		do createWall(21,23,10,25,10);
		do createWall(22,31,10,29,10);

		// Walls inside the map
		do createWall(23,3,21,9,21);
		do createWall(24,9,21,9,18);

		do createWall(25,23,18,31,18);
		do createWall(26,27,18,27,21);
		do createWall(27,24,21,24,24);

		do createWall(28,30,21,30,24);
		do createWall(29,21,21,12,21);
		do createWall(30,33,21,42,21);

		do createWall(31,45,21,51,21);
		do createWall(32,45,21,45,18);

		do createWall(33,45,18,41,18);
		do createWall(34,9,18,13,18);

		do createWall(35,9,15,13,15);
		do createWall(36,41,15,45,15);

		do createWall(37,16,15,17,18);
		do createWall(38,20,13,20,18);
		do createWall(39,34,13,34,18);
		do createWall(40,37,15,38,18);

		// Walls inside the map (Upper part)
		do createWall(41,23,7,31,7);
		do createWall(42,27,3,27,7);

		do createWall(43,23,3,24,4);
		do createWall(44,30,3,31,4);

		do createWall(45,17,7,17,12);
		do createWall(46,37,7,37,12);

		do createWall(47,17,10,20,10);
		do createWall(48,34,10,37,10);

		do createWall(49,3,3,6,6);
		do createWall(50,48,3,51,6);

		do createWall(51,20,3,20,7);
		do createWall(52,34,3,34,7);

		do createWall(53,17,0,17,4);
		do createWall(54,37,0,37,4);

		// Spiral walls
		do createWall(55,14,3,9,3);
		do createWall(56,40,3,45,3);

		do createWall(57,14,3,14,9);
		do createWall(58,40,3,40,9);

		do createWall(59,9,9,14,9);
		do createWall(60,40,9,45,9);

		do createWall(61,9,6,9,9);
		do createWall(62,45,6,45,9);

		do createWall(63,9,6,11,6);
		do createWall(64,43,6,45,6);

		do createWall(65,9,12,14,12);
		do createWall(66,40,12,45,12);

		//Ghost house door
		let row = tiles[10];
		let row[3] = -1;
		let row = tiles[11];
		let row[3] = -1;


	  	return;
	}
  
	method void draw() {
		var Wall w;
	  	var int i;
	  	let i = 0;
		do Screen.setColor(color);
	  	while (i < nWalls) {
			let w = walls[i];
			do w.drawBorder();
			let i = i + 1;
		}
		let i = 0;
	  	do Screen.setColor(~color);
		while (i < nWalls) {
			let w = walls[i];
			do w.drawInside();
			let i = i + 1;
		}
		let i = 0;
		while (i < nWalls) {
			let w = walls[i];
			do w.drawDetails(color);
			let i = i + 1;
		}
		let i = 0;
	  	do Screen.setColor(color);
		while (i < nWalls) {
			let w = walls[i];
			do w.fixDetails1();
			let i = i + 1;
		}
		let i = 0;
	  	do Screen.setColor(~color);
		while (i < nWalls) {
			let w = walls[i];
			do w.fixDetails2();
			let i = i + 1;
		}
		do drawDoor();
		return;
	}
  
	method boolean checkOverlapping(int x, int y) {
		var boolean isOverlaping, dx, dy;
		var Array row;
	  	var int c, r;
		let c = (x - 6) / 9;
		let r = (y - 27) / 9;
		let row = tiles[r];
		let isOverlaping = (row[c / 8] | ~(Math2.two_to_the(7 - Math2.mod(c, 8)))) = -1;
		
		let dx = Math2.mod(x - 6, 9) > 0;
		let dy = Math2.mod(y - 27, 9) > 0;

		if (dx & dy) {
			return true;
		}
		
		if (dx) {
			let c = c + 1;
			let isOverlaping = isOverlaping | ((row[c / 8] | ~(Math2.two_to_the(7 - Math2.mod(c, 8)))) = -1);
			let c = c - 1;
		}

		if (dy) {
			let r = r + 1;
			let row = tiles[r];
			let isOverlaping = isOverlaping | ((row[c / 8] | ~(Math2.two_to_the(7 - Math2.mod(c, 8))) = -1));
		}

		return isOverlaping;
	}
	
	method void drawDoor() {
		do Screen.setColor(color);
		do Screen.drawRectangle(241, 120, 268, 123);
		return;
	}
  
	method void dispose() {
		var Wall w;
	  	var int i;
	  	let i = 0;
	  	while (i < nWalls) {
			let w = walls[i];
			do w.dispose();
			let i = i + 1;
		}
		do walls.dispose();
	  	do Memory.deAlloc(this);
	  	return;
	}
}